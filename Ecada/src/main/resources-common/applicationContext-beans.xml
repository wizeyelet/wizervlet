<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<context:component-scan base-package="com.tj">
		<context:include-filter type="regex"
			expression="\.*\.service\.*" />
		<context:include-filter type="regex"
			expression="\.*\.dao\.*" />
	</context:component-scan>
	<!-- 공용 설정 파일 -->
	<util:properties id="config"
		location="classpath:*config.ini" />

	<!-- bean IOC - 비밀번호재설정을 위한 메일 보낼 유틸 bean설정 -->
	<bean id="AES256Util" class="com.tj.util.AES256Util">
		<constructor-arg value="aes256-test-key!!"></constructor-arg>
	</bean>


	<bean id="fileUtil" class="com.tj.util.FileUtil" />
	<util:properties id="config"
		location="classpath:*config.ini" />


	<bean id="MailUtil" class="com.tj.util.MailUtil" />
	<util:properties id="config"
		location="classpath:*config.ini" />

	<!-- 홈에서 이메일 전송하기 위한 bean설정 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="wizeyelet@gmail.com" />
		<property name="password" value="1312akqjq" />
		<property name="javaMailProperties">
			<props>
				<!-- <prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop> -->
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>

	<!-- Annotation 기반의 Component Scan 필터(service package 만 검색) -->
	<!-- <context:component-scan base-package="com.tj.service"> <context:include-filter 
		type="annotation" expression="org.springframework.stereotype.Service" /> -->
	<!-- <context:include-filter type="regex" expression="\.*\.service\.*"/> -->
	<!-- <context:include-filter type="regex" expression="\.*\.dao\.*"/> </context:component-scan> -->


	<!-- DB와 연결/쿼리의 수행/결과의 가공 등을 담당하는 sqlSessionFactory -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- DB에 접속하기 위해서 설정 -->
		<property name="dataSource" ref="dataSource"></property>

		<!-- myBatis 기본 설정 -->
		<property name="configLocation"
			value="classpath:mybatis-configuration.xml"></property>

		<!-- SQL 적힌 mapper(xml) 위치 -->
		<property name="mapperLocations"
			value="classpath:sql/SQL.*.xml"></property>

		<!-- 트랙잭션 관리를 위한 것 -->
		<property name="transactionFactory">
			<bean
				class="org.mybatis.spring.transaction.SpringManagedTransactionFactory"></bean>
		</property>
	</bean>

	<!-- DAO interface를 mapper(xml)과 연결시키기 위해 탐색(scan) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tj.dao"></property>
	</bean>

	<!-- 트랜잭션 관리를 위한 bean -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- transaction annotation -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- 배치 작업 선언 -->
	<!-- <bean id="cronQuartz" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> 
		<property name="jobClass" value="com.kbh.pf.job.AttachJob"/> </bean> -->
	<!-- 배치 작업 반복 시간 등록 -->
	<!-- <bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="cronQuartz"></property> -->
	<!-- 초 분 시 일 월 요일 5초마다 => 초 자리에, */5 -->
	<!-- <property name="cronExpression" value="*/10 * * * * ?"></property> 
		</bean> 배치 작업 스케쥴로 등록 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> <list> <ref bean="cronTrigger1"></ref> </list> 
		</property> </bean> -->
	<!-- 작업, 주기, 실행 순서. -->
</beans>
