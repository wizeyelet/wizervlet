<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.tj.dao.MemberDao">
	<!-- resultType은 반드시 있어야 함 -->
	<select id="memberList" parameterType="HashMap" resultType="HashMap">
	SELECT member_idx AS memberIdx, 
		   member_id AS memberId,
		   member_name AS memberName, 
		   member_nick AS memberNick, 
		   email, 
		   date_format(create_date, '%Y-%m-%d %H:%i:%s') AS createDate
	  FROM member
	 WHERE 1=1
	<if test="search != null and search != ''">
		AND ( member_id LIKE CONCAT('%', #{search}, '%') OR email LIKE CONCAT('%', #{search}, '%') )
	</if>
	<if test="(searchType != null and searchType == 'memberId') and searchText != ''">
		AND member_id LIKE CONCAT('%', #{searchText}, '%')
	</if>
	<if test="(searchType != null and searchType == 'email') and searchText != ''">
		AND email LIKE CONCAT('%', #{searchText}, '%')
	</if>
	<if test="sort != null and sort != '' and order != null and order != ''">
	ORDER BY ${sort} ${order}
	</if>
	<if test="start != null and start != '' and rows != null and rows != ''">
	LIMIT ${start}, ${rows}
	</if>	
	</select>
	
	<select id="getMemberById" parameterType="HashMap" resultType="HashMap">
	SELECT member_idx AS memberIdx, 
		   member_pw AS memberPw,
		   member_id AS memberId,
		   member_name AS memberName, 
		   member_nick AS memberNick, 
		   type_seq AS typeSeq, 
		   email, 
		   date_format(create_date, '%Y-%m-%d %H:%i:%s') AS createDate
	  FROM member
	 WHERE 1=1
	   AND member_id = #{memberId}
	</select>
	
	<select id="makeCipherText" parameterType="map" resultType="String">
	SELECT SHA2(MD5(#{memberPw}), 256) AS pw
	</select>
	
	<select id="checkId" parameterType="map" resultType="int">
	 SELECT COUNT(member_idx)
	   FROM member
	  WHERE member_id = #{memberId} 
	</select>
	
	<insert id="join" parameterType="map">
		INSERT INTO member (member_id, member_pw, member_name, member_nick, email, type_seq, create_date)
		VALUES (#{memberId}, SHA2(MD5(#{memberPw}), 256), #{memberName}, #{memberNick}, #{email}, '1', NOW())
	</insert>

	<delete id="delMember" parameterType="map">
	delete from member where member_idx = ${memberIdx}
	</delete>
	
	<select id="mList" parameterType="map" resultType="map">
	select 	member_idx as memberIdx,
			member_id as memberId,
			member_nick as memberNick,
			member_name as memberName,
			email,
			date_format(create_date, '%Y-%m-%d') as createDate
	from 	member
	where 1=1 
		<if test="searchType != null and searchType == 1">
		and (member_id like concat('%', #{searchText}, '%') or member_nick like concat('%', #{searchText}, '%')
		or member_name like concat('%', #{searchText}, '%') or email like concat('%', #{searchText}, '%'))
		</if>
		<if test="searchType != null and searchType == 2">
		and member_id like concat('%', #{searchText}, '%')
		</if>
		<if test="searchType != null and searchType == 3">
		and email like concat('%', #{searchText}, '%')
		</if>
	order by ${sidx} ${sord}
	limit ${startIdx}, ${rows}
	</select>
	
	<select id="totalMember" parameterType="map" resultType="int">
	select count(member_idx) from member
	where 1=1 
		<if test="searchType != null and searchType == 1">
		and (member_id like concat('%', #{searchText}, '%') or member_nick like concat('%', #{searchText}, '%')
		or member_name like concat('%', #{searchText}, '%') or email like concat('%', #{searchText}, '%'))
		</if>
		<if test="searchType != null and searchType == 2">
		and member_id like concat('%', #{searchText}, '%')
		</if>
		<if test="searchType != null and searchType == 3">
		and email like concat('%', #{searchText}, '%')
		</if>
	</select>
	
	<select id="getMemberData" parameterType="String" resultType="HashMap">
	select *
	from member
	where member_id=#{0}
	</select>

	<update id="modifyMemberData" parameterType="java.util.HashMap">
	update member set member_name = #{memberName}, member_nick = #{memberNick}, member_pw = SHA2(MD5(#{memberPw}), 256), email = #{email}, update_date = now() where member_idx=#{memberIdx}
	</update>
	
	<update id="resetPw" parameterType="java.util.HashMap">
	update member set member_pw = SHA2(MD5(#{password}), 256) where member_id=#{memberId}
	</update>
</mapper>